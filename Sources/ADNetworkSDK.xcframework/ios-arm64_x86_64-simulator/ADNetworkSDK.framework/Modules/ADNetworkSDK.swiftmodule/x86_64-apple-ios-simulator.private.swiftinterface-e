// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ADNetworkSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import ADNetworkSDK
import AVFoundation
import CoreLocation
import CoreTelephony
import Foundation
import JavaScriptCore
import Network
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ADFormat : Swift.Int, Swift.CaseIterable {
  case video, banner, fullscreenBanner
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ADNetworkSDK.ADFormat]
  public typealias RawValue = Swift.Int
  public static var allCases: [ADNetworkSDK.ADFormat] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ADNetworkSDKDelegate {
  @objc func downloadComplete(id: Swift.String, fileName: Swift.String)
  @objc func downloadFailed(id: Swift.String, error: Swift.String)
  @objc func haveAdsToShow(available: Swift.Bool)
  @objc func showStart()
  @objc func showClose()
  @objc func showClick()
  @objc func showComplete(id: Swift.String?, rewarded: Swift.Bool, rewardRecieved: Swift.Bool)
  @objc func showFailed(error: Swift.String)
  @objc optional func log(_ message: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class ADNetworkSDK : ObjectiveC.NSObject {
  @objc weak public var delegate: (any ADNetworkSDK.ADNetworkSDKDelegate)?
  @objc public var debug: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var shared: ADNetworkSDK.ADNetworkSDK
  @objc public func setupWithKey(_ key: Swift.String, delegate: any ADNetworkSDK.ADNetworkSDKDelegate)
  @objc public func version() -> Swift.String
  @objc public func reset(completionHandler: @escaping () -> Swift.Void)
  @objc public func loadAd(rewarded: Swift.Bool)
  public func load(rewarded: Swift.Bool, formats: [ADNetworkSDK.ADFormat]? = nil)
  @objc public func show()
  @objc public func close()
  @objc deinit
}
extension WebKit.WKWebView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) public func enableConsoleLog()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension ADNetworkSDK.ADFormat : Swift.Equatable {}
extension ADNetworkSDK.ADFormat : Swift.Hashable {}
extension ADNetworkSDK.ADFormat : Swift.RawRepresentable {}
